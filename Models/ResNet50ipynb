{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"SPbe_A9gUslP"},"outputs":[],"source":["import torch\n","import tensorflow as tf\n","import numpy as np\n","from sklearn.metrics import classification_report\n","import pandas as pd\n","from tensorflow.keras.applications import resnet50\n","from tensorflow.keras.callbacks import EarlyStopping,ModelCheckpoint\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix,classification_report\n","from keras.optimizers import Adam\n","from keras.layers import Conv2D, GlobalAveragePooling2D, Dropout, Flatten, Dense, Activation,GlobalMaxPooling2D\n","from keras.models import Model,Sequential\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras import models, layers"]},{"cell_type":"markdown","source":["## **Opening and shaping data**"],"metadata":{"id":"36ih-u6j9b45"}},{"cell_type":"code","source":["train_data = np.load('CIFAKE_Train.npz')\n","test_data = np.load('CIFAKE_Test.npz')"],"metadata":{"id":"aIbnXVLkPGFf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train = train_data['images']\n","y_train = train_data['labels']\n","\n","X_test = test_data['images']\n","y_test = test_data['labels']\n","\n","label_names = train_data['label_names']"],"metadata":{"id":"bS6gmdDHPGZq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Training Dataset\")\n","x=np.array(X_train)\n","print(x.shape)\n","y=to_categorical(y_train) # onehot encoding of the labels\n","print(y.shape)\n","\n","# Validation Dataset\n","print(\"Validation Dataset\")\n","val_images=np.array(X_test)\n","print(val_images.shape)\n","val_image_label=to_categorical(y_test) # onehot encoding of the labels)\n","print(val_image_label.shape)"],"metadata":{"id":"z5Pttj_DgZAa","executionInfo":{"status":"ok","timestamp":1698248440870,"user_tz":240,"elapsed":189,"user":{"displayName":"Kayla Martinez","userId":"09259092127298537811"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6169c60d-fb45-46d9-a99a-ce9ae6fa833d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Dataset\n","(100000, 32, 32, 3)\n","(100000, 2)\n","Validation Dataset\n","(20000, 32, 32, 3)\n","(20000, 2)\n"]}]},{"cell_type":"markdown","source":["## **Building and training the model**"],"metadata":{"id":"B05Xgx_E9f6x"}},{"cell_type":"code","source":["# initializing model with weights='imagenet\n","model_resnet=resnet50.ResNet50(weights='imagenet')\n","\n","# displays the summary to see the properties of the model\n","#model_resnet.summary()"],"metadata":{"id":"J78ShgfzhjGc","executionInfo":{"status":"ok","timestamp":1698248449473,"user_tz":240,"elapsed":8609,"user":{"displayName":"Kayla Martinez","userId":"09259092127298537811"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2bd9895d-9d98-4fee-d186-dbc5fd9b6572"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels.h5\n","102967424/102967424 [==============================] - 1s 0us/step\n"]}]},{"cell_type":"code","source":["# prepares  input layer\n","input_layer=layers.Input(shape=(32,32,3))\n","\n","# initializes the transfer model ResNet50\n","resnet_model=resnet50.ResNet50(weights='imagenet',input_tensor=input_layer,include_top=False)\n","\n","# See the summary of the model with our properties.\n","#resnet_model.summary()"],"metadata":{"id":"Wbmfugudhjds","executionInfo":{"status":"ok","timestamp":1698248455674,"user_tz":240,"elapsed":6227,"user":{"displayName":"Kayla Martinez","userId":"09259092127298537811"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d65b3990-4195-4ea0-ed44-aa1c2b17c84c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94765736/94765736 [==============================] - 1s 0us/step\n"]}]},{"cell_type":"code","source":["# takes out last layer\n","last_layer=resnet_model.output\n","\n","# Add flatten layer\n","flatten=layers.Flatten()(last_layer)\n","\n","\n","# Add dense layer to the final output layer\n","output_layer=layers.Dense(2,activation='softmax')(flatten)\n","\n","# Creating modle with input and output layer\n","model=models.Model(inputs=input_layer,outputs=output_layer)\n","\n","# Summarize the model\n","#model.summary()"],"metadata":{"id":"RPi__taYfko8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# we will freez all the layers except the last layer\n","# we are making all the layers intrainable except the last layer\n","for layer in model.layers[:-1]:\n","    layer.trainable=False\n","#model.summary()"],"metadata":{"id":"HAYsCX3ejzNt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # trains the model\n","from sklearn.model_selection import train_test_split\n","xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2,random_state=5)\n","pd.DataFrame(ytest).head(3)"],"metadata":{"id":"4nL1Ywwkj-nh","executionInfo":{"status":"ok","timestamp":1698248456064,"user_tz":240,"elapsed":402,"user":{"displayName":"Kayla Martinez","userId":"09259092127298537811"}},"colab":{"base_uri":"https://localhost:8080/","height":143},"outputId":"037a9ba8-1b89-4fb4-b360-35886806c2c7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     0    1\n","0  1.0  0.0\n","1  0.0  1.0\n","2  1.0  0.0"],"text/html":["\n","  <div id=\"df-128e4831-9564-41b7-9a7b-89a1c3db6531\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-128e4831-9564-41b7-9a7b-89a1c3db6531')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-128e4831-9564-41b7-9a7b-89a1c3db6531 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-128e4831-9564-41b7-9a7b-89a1c3db6531');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8e62e3fc-ee79-4c00-ad59-8b8969a76c30\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8e62e3fc-ee79-4c00-ad59-8b8969a76c30')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8e62e3fc-ee79-4c00-ad59-8b8969a76c30 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["# Compilies the model\n","model.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=False), optimizer='adam',metrics=['accuracy'])"],"metadata":{"id":"vRgzBBEEkKur"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Fits the Model\n","#model.fit(x,y,epochs=10,batch_size=1000,verbose=True,validation_data=(val_images,val_image_label))\n","history = model.fit(xtrain,ytrain,epochs=10,batch_size=1000,verbose=True,validation_data=(xtest,ytest))\n","history"],"metadata":{"id":"CkNKW88FkOhg","executionInfo":{"status":"ok","timestamp":1698252247136,"user_tz":240,"elapsed":490971,"user":{"displayName":"Kayla Martinez","userId":"09259092127298537811"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8b3052f7-3850-4865-d8ad-e80f1fdb4116"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","80/80 [==============================] - 396s 5s/step - loss: 0.6473 - accuracy: 0.7484 - val_loss: 0.4219 - val_accuracy: 0.8334\n","Epoch 2/10\n","80/80 [==============================] - 375s 5s/step - loss: 0.3787 - accuracy: 0.8467 - val_loss: 0.3600 - val_accuracy: 0.8579\n","Epoch 3/10\n","80/80 [==============================] - 379s 5s/step - loss: 0.3358 - accuracy: 0.8640 - val_loss: 0.3341 - val_accuracy: 0.8670\n","Epoch 4/10\n","80/80 [==============================] - 386s 5s/step - loss: 0.3152 - accuracy: 0.8716 - val_loss: 0.3230 - val_accuracy: 0.8690\n","Epoch 5/10\n","80/80 [==============================] - 377s 5s/step - loss: 0.3021 - accuracy: 0.8764 - val_loss: 0.3147 - val_accuracy: 0.8717\n","Epoch 6/10\n","80/80 [==============================] - 384s 5s/step - loss: 0.2937 - accuracy: 0.8798 - val_loss: 0.3059 - val_accuracy: 0.8758\n","Epoch 7/10\n","80/80 [==============================] - 378s 5s/step - loss: 0.2868 - accuracy: 0.8825 - val_loss: 0.3013 - val_accuracy: 0.8759\n","Epoch 8/10\n","80/80 [==============================] - 377s 5s/step - loss: 0.2834 - accuracy: 0.8840 - val_loss: 0.2982 - val_accuracy: 0.8763\n","Epoch 9/10\n","80/80 [==============================] - 372s 5s/step - loss: 0.2796 - accuracy: 0.8845 - val_loss: 0.2954 - val_accuracy: 0.8781\n","Epoch 10/10\n","80/80 [==============================] - 366s 5s/step - loss: 0.2770 - accuracy: 0.8862 - val_loss: 0.2940 - val_accuracy: 0.8780\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7ed03daa11e0>"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["## **Plot of Accuracy vs. Epoch**"],"metadata":{"id":"eOGcaD3q8tTx"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","fig1 = plt.gcf()\n","plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.axis(ymin=0.4,ymax=1)\n","plt.grid()\n","plt.title('Model Accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epochs')\n","plt.legend(['train', 'validation'])\n","plt.show()\n"],"metadata":{"id":"94xGbwFqkRlT","executionInfo":{"status":"ok","timestamp":1698259005152,"user_tz":240,"elapsed":569,"user":{"displayName":"Kayla Martinez","userId":"09259092127298537811"}},"colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"c4f79e19-8ba2-4a1d-a10e-b7e2da4f3511"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## **Making Predictions**"],"metadata":{"id":"6CC_dk1m9NMP"}},{"cell_type":"code","source":["# # Function to make predictions. img_name is the image we want to make a prediction on\n","# def predict(img_name):\n","#     img=image.load_img(img_name,target_size=(100,100))\n","#     img=image.img_to_array(img)\n","#     plt.imshow(img.astype('int32'))\n","#     plt.show()\n","#     img=resnet50.preprocess_input(img)\n","#     prediction=model.predict(img.reshape(1,100,100,3))\n","#     output=np.argmax(prediction)\n","#     print(class_names[output])"],"metadata":{"id":"EDaZArgJ85mz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ZqiLLWlZ-vGv"},"execution_count":null,"outputs":[]}]}